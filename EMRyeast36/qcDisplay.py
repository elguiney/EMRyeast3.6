import ipywidgets as widgets
from ipywidgets import Layout
from IPython.display import clear_output
import numpy as np
import matplotlib.pyplot as plt
import EMRyeast36


def makeQCbuttons():
    b1 = widgets.Button(
        description=' accept',
        icon='check-square',
        tooltip='accept cell and continute')
    b2 = widgets.Button(
        description=' reject',
        icon='minus-square',
        tooltip='reject cell and continue')
    b3 = widgets.Button(
        description=' previous',
        icon='chevron-left',
        tooltip='go back to previously reviewed cell')
    b4 = widgets.Button(
        description=' next',
        icon='chevron-right',
        tooltip='go to next cell without changing status')
    return(b1,b2,b3,b4)

def makeQCoutputs():
    out1 = widgets.Output(layout=Layout(
            height='400px', width = '600px', border='solid'))
    out2 = widgets.Output(layout=Layout(
            border='solid'))
    return out1, out2

def frameDisplay(qcDict,frameTitles):
    qcFrame = qcDict['qcFrame']
    redInvFrame = qcDict['redInvFrame']
    greenInvFrame = qcDict['greenInvFrame']
    frameSize = len(redInvFrame)
    fig = plt.figure(figsize=(12,8))
    qcAx = plt.subplot2grid((2,3), (0,0), rowspan=2, colspan=2)
    qcAx.imshow(qcFrame)
    qcAx.axis('off')
    plt.title('Main display: blinded cell idx = '+str(randLookup))
    redAx = plt.subplot2grid((2,3), (0,2))
    redAx.imshow(redInvFrame, cmap='gray')
    redAx.xaxis.set_ticks(np.linspace(0,frameSize,5))
    redAx.yaxis.set_ticks(np.linspace(0,frameSize,5))
    redAx.xaxis.set_ticklabels([])
    redAx.yaxis.set_ticklabels([])
    redAx.grid()
    plt.title(frameTitles[0])
    grnAx = plt.subplot2grid((2,3), (1,2))
    grnAx.imshow(greenInvFrame, cmap='gray')
    grnAx.xaxis.set_ticks(np.linspace(0,frameSize,5))
    grnAx.yaxis.set_ticks(np.linspace(0,frameSize,5))
    grnAx.xaxis.set_ticklabels([])
    grnAx.yaxis.set_ticklabels([])
    grnAx.grid()
    plt.title(frameTitles[1])
    clear_output(wait=True)
    plt.show()

def makeQC_Art1mNG(randLookup, resultsData, df, pathList):
    scalingFactors = [0.2,0.2]
    fieldIdx = int(df.loc[df['randomIdx'] == randLookup,'fieldIdx'])
    cellLbl = int(df.loc[df['randomIdx'] == randLookup,'localLbl'])
    rgbQC = resultsData['totalQC'][fieldIdx]
    mcl = resultsData['totalMcl'][fieldIdx]
    dvImage = EMRyeast36.basicDVreader(pathList[fieldIdx],rolloff=64)
    greenFluor = dvImage[1,3,:,:].astype(float)
    redFluor = np.amax(dvImage[0,:,:,:],axis=0).astype(float)
    qcDict = EMRyeast36.helpers.make_qcFrame(
            rgbQC, greenFluor, redFluor, mcl, cellLbl, scalingFactors, 10)
    return(qcDict) 
    
def makeQC_clickfunctions(randLookupStart, resultsData, df, pathList,
                          frameTitles, resultsDirectory):
    '''
    builds click functions for b1, b2, b3, and b4 generated by makeQCbuttons()
    each funtion updates the qc statusList based on the button press
    (b1 = accept and advance, b2 = reject and advance,
     b3 = go back, b4 = advance)
    
    '''
    
    global randLookup
    global total
    total = len(df)
    randLookup = randLookupStart
    randArray = list(df['randomIdx'])
    indexArray = [randArray.index(i) for i in range(len(randArray))]
    statusList = list(df['qcStatus'])
    out1,out2 = makeQCoutputs()
    
    def get_context(randLookup, indexArray, statusList):
        pastRandIdces = list(range(max(0,randLookup-5),randLookup+1))
        pastStatus = [statusList[pastloc] for 
                      pastloc in indexArray[max(0,randLookup-5):randLookup+1]]
        return(pastRandIdces, pastStatus)
        
    def print_context(currentlocation, randLookup, pastRandIdces, pastStatus):
        print('current cell (blind Idx):',
              str(randLookup),
              '\nstatus: ',str(statusList[currentlocation]),
              '\n\nprevious cells:\n')
        for pair in zip(reversed(pastRandIdces),reversed(pastStatus)):
            print(pair)
           
    def click_b1(b):
        global randLookup
        location = indexArray[randLookup]
        statusList[location] = 'accepted'
        pastRandIdces, pastStatus = get_context(
                randLookup, indexArray, statusList)
        if randLookup == total-1:
            with out2:
                out2.clear_output()
            with out2:
                print('finshed')
        else:
            randLookup += 1
            currentlocation = indexArray[randLookup]
            qcDict = makeQC_Art1mNG(randLookup, resultsData, df, pathList)
            with out1:
                frameDisplay(qcDict,frameTitles)
            with out2:
                out2.clear_output()
            with out2:
                print_context(
                        currentlocation, randLookup, pastRandIdces, pastStatus)
            return(statusList)
                
    def click_b2(b):
        global randLookup
        location = indexArray[randLookup]
        statusList[location] = 'rejected'
        pastRandIdces, pastStatus = get_context(
                randLookup, indexArray, statusList)
        if randLookup == total-1:
            with out2:
                out2.clear_output()
            with out2:
                print('finshed')
        else:
            randLookup += 1
            currentlocation = indexArray[randLookup]
            qcDict = makeQC_Art1mNG(randLookup, resultsData, df, pathList)
            with out1:
                frameDisplay(qcDict,frameTitles)
            with out2:
                out2.clear_output()
            with out2:
                print_context(
                        currentlocation, randLookup, pastRandIdces, pastStatus)
            return(statusList)
        
    def click_b3(b):
        global randLookup
        randLookup -= 1
        currentlocation = indexArray[randLookup]
        pastRandIdces, pastStatus = get_context(
                randLookup-1, indexArray, statusList)
        qcDict = makeQC_Art1mNG(randLookup, resultsData, df, pathList)
        with out1:
            frameDisplay(qcDict,frameTitles)
        with out2:
            out2.clear_output()
        with out2:
            print_context(
                        currentlocation, randLookup, pastRandIdces, pastStatus)

    def click_b4(b):
        global randLookup
        randLookup += 1
        currentlocation = indexArray[randLookup]
        pastRandIdces, pastStatus = get_context(
                randLookup-1, indexArray, statusList)
        qcDict = makeQC_Art1mNG(randLookup, resultsData, df, pathList)
        with out1:
            frameDisplay(qcDict,frameTitles)
        with out2:
            out2.clear_output()
        with out2:
            print_context(
                        currentlocation, randLookup, pastRandIdces, pastStatus)
             
    return(click_b1, click_b2, click_b3, click_b4, out1, out2, statusList)